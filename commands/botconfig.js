const { EmbedBuilder, PermissionFlagsBits } = require('discord.js');

// Refer√™ncia para o servidor de whitelist
let whitelistServer = null;

module.exports = {
    data: {
        name: 'botconfig',
        description: '‚öôÔ∏è Gerencia as configura√ß√µes do bot (apenas para administradores)'
    },
    
    async execute(interaction, client) {
        // Verificar permiss√µes do usu√°rio
        if (!interaction.member.permissions.has(PermissionFlagsBits.Administrator)) {
            return await interaction.reply({
                content: '‚ùå Voc√™ n√£o tem permiss√£o para gerenciar as configura√ß√µes do bot.',
                ephemeral: true
            });
        }
        
        // Verificar se o servidor web est√° rodando
        if (global.whitelistServer) {
            whitelistServer = global.whitelistServer;
        } else {
            const WhitelistServer = require('../modules/whitelist-server');
            
            try {
                whitelistServer = new WhitelistServer(client);
                await whitelistServer.start();
                global.whitelistServer = whitelistServer;
            } catch (error) {
                console.error('‚ùå Erro ao iniciar servidor de whitelist:', error);
                return await interaction.reply({
                    content: 'Erro ao acessar as configura√ß√µes do bot. Por favor, tente novamente mais tarde.',
                    ephemeral: true
                });
            }
        }

        // Obter subcomando
        const subCommand = interaction.options.getSubcommand(false);
        
        // Se n√£o houver subcomando, mostrar status atual
        if (!subCommand) {
            return await showStatus(interaction, whitelistServer);
        }
        
        // Processar subcomandos
        switch (subCommand) {
            case 'whitelist':
                return await toggleWhitelist(interaction, whitelistServer);
            case 'filtro':
                return await toggleChatFilter(interaction, whitelistServer);
            case 'automod':
                return await toggleAutoMod(interaction, whitelistServer);
            default:
                return await showStatus(interaction, whitelistServer);
        }
    }
};

// Fun√ß√£o para mostrar o status atual das configura√ß√µes
async function showStatus(interaction, whitelistServer) {
    const settings = whitelistServer.db.botSettings;
    
    const embed = new EmbedBuilder()
        .setColor('#3498db')
        .setTitle('‚öôÔ∏è Configura√ß√µes do Bot')
        .addFields(
            { 
                name: 'üìù Sistema de Whitelist', 
                value: settings.whitelistSystem?.enabled ? '‚úÖ Ativo' : '‚ùå Inativo',
                inline: true 
            },
            { 
                name: 'üîç Filtro de Chat', 
                value: settings.chatFilter?.enabled ? '‚úÖ Ativo' : '‚ùå Inativo',
                inline: true 
            },
            { 
                name: 'üõ°Ô∏è Modera√ß√£o Autom√°tica', 
                value: settings.autoModeration?.enabled ? '‚úÖ Ativa' : '‚ùå Inativa',
                inline: true 
            }
        )
        .setFooter({ text: 'Use /botconfig <m√≥dulo> para ativar/desativar cada m√≥dulo' })
        .setTimestamp();
    
    return await interaction.reply({
        embeds: [embed],
        ephemeral: true
    });
}

// Fun√ß√£o para ativar/desativar o sistema de whitelist
async function toggleWhitelist(interaction, whitelistServer) {
    const settings = whitelistServer.db.botSettings;
    
    // Inverter o estado atual
    settings.whitelistSystem.enabled = !settings.whitelistSystem.enabled;
    
    // Salvar configura√ß√µes
    whitelistServer.saveBotSettings();
    
    // Registrar a√ß√£o do administrador
    whitelistServer.logAdminActivity(
        interaction.user.tag,
        'atualizar_config_bot',
        { 
            ip: 'Discord Command',
            module: 'whitelist',
            enabled: settings.whitelistSystem.enabled
        }
    );
    
    // Responder ao usu√°rio
    return await interaction.reply({
        content: `‚úÖ Sistema de Whitelist foi ${settings.whitelistSystem.enabled ? 'ativado' : 'desativado'} com sucesso!`,
        ephemeral: true
    });
}

// Fun√ß√£o para ativar/desativar o filtro de chat
async function toggleChatFilter(interaction, whitelistServer) {
    const settings = whitelistServer.db.botSettings;
    
    // Inverter o estado atual
    settings.chatFilter.enabled = !settings.chatFilter.enabled;
    
    // Salvar configura√ß√µes
    whitelistServer.saveBotSettings();
    
    // Registrar a√ß√£o do administrador
    whitelistServer.logAdminActivity(
        interaction.user.tag,
        'atualizar_config_bot',
        { 
            ip: 'Discord Command',
            module: 'chatfilter',
            enabled: settings.chatFilter.enabled
        }
    );
    
    // Responder ao usu√°rio
    return await interaction.reply({
        content: `‚úÖ Filtro de Chat foi ${settings.chatFilter.enabled ? 'ativado' : 'desativado'} com sucesso!`,
        ephemeral: true
    });
}

// Fun√ß√£o para ativar/desativar a modera√ß√£o autom√°tica
async function toggleAutoMod(interaction, whitelistServer) {
    const settings = whitelistServer.db.botSettings;
    
    // Inverter o estado atual
    settings.autoModeration.enabled = !settings.autoModeration.enabled;
    
    // Salvar configura√ß√µes
    whitelistServer.saveBotSettings();
    
    // Registrar a√ß√£o do administrador
    whitelistServer.logAdminActivity(
        interaction.user.tag,
        'atualizar_config_bot',
        { 
            ip: 'Discord Command',
            module: 'automod',
            enabled: settings.autoModeration.enabled
        }
    );
    
    // Responder ao usu√°rio
    return await interaction.reply({
        content: `‚úÖ Modera√ß√£o Autom√°tica foi ${settings.autoModeration.enabled ? 'ativada' : 'desativada'} com sucesso!`,
        ephemeral: true
    });
}