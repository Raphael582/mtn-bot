const { SlashCommandBuilder, PermissionsBitField, EmbedBuilder, ChannelType } = require('discord.js');

module.exports = {
    data: new SlashCommandBuilder()
        .setName('nuke')
        .setDescription('üî• Limpa o canal atual apagando as mensagens. (Requer permiss√£o de Gerenciar Canais)')
        .setDefaultMemberPermissions(PermissionsBitField.Flags.ManageChannels)
        .setDMPermission(false),

    async execute(interaction) {
        if (!interaction.channel.isTextBased() || interaction.channel.type === ChannelType.DM) {
            return await interaction.reply({ content: 'Este comando s√≥ pode ser usado em canais de texto em servidores, n√£o em DMs.', ephemeral: true });
        }

        const channel = interaction.channel;

        try {
            // Informar que o processo come√ßou
            await interaction.reply({ content: 'Iniciando processo de limpeza do canal...', ephemeral: true });

            // Clonar o canal e reposicion√°-lo
            const position = channel.position;
            const newChannel = await channel.clone();
            await channel.delete();
            await newChannel.setPosition(position);

            // Enviar mensagem no novo canal
            const embedLogNuke = new EmbedBuilder()
                .setColor('#ff0000')
                .setTitle('üî• Canal NUKADO! üî•')
                .setDescription(`O canal foi limpo por ${interaction.user.tag} (ID: ${interaction.user.id}).`)
                .addFields(
                    { name: 'üëÆ‚Äç‚ôÇÔ∏è Mod Respons√°vel', value: `${interaction.user.tag} (ID: ${interaction.user.id})`, inline: true }
                )
                .setTimestamp();

            await newChannel.send({ content: 'üî• Canal limpo com sucesso! üî•', embeds: [embedLogNuke] });
            
            // N√£o precisamos atualizar a resposta inicial, pois o canal foi exclu√≠do
        } catch (error) {
            console.error("‚ùå Erro ao nukar o canal:", error);
            
            // Em caso de erro, tente responder de uma forma que n√£o dependa da intera√ß√£o original
            try {
                if (interaction.replied || interaction.deferred) {
                    await interaction.followUp({ content: '‚ùå Falha ao limpar o canal.', ephemeral: true }).catch(e => {});
                } else {
                    await interaction.reply({ content: '‚ùå Falha ao limpar o canal.', ephemeral: true }).catch(e => {});
                }
            } catch (e) {
                console.error("N√£o foi poss√≠vel responder √† intera√ß√£o:", e);
            }
        }
    }
};