const { ActionRowBuilder, ButtonBuilder, ButtonStyle, EmbedBuilder } = require('discord.js');
const path = require('path');
const fs = require('fs');

// Refer√™ncia para o servidor de whitelist
let whitelistServer = null;

module.exports = {
    // Fun√ß√£o para executar o comando de whitelist
    async execute(interaction, client) {
        // Verificar se o servidor web est√° rodando
        if (global.whitelistServer) {
            whitelistServer = global.whitelistServer;
        } else {
            const WhitelistServer = require('../modules/whitelist-server');
            
            try {
                whitelistServer = new WhitelistServer(client);
                await whitelistServer.start();
                global.whitelistServer = whitelistServer;
            } catch (error) {
                console.error('‚ùå Erro ao iniciar servidor de whitelist:', error);
                return await interaction.reply({
                    content: 'Erro ao iniciar o sistema de whitelist. Por favor, tente novamente mais tarde ou contate um administrador.',
                    ephemeral: true
                });
            }
        }

        try {
            // Verificar se o usu√°rio j√° submeteu um formul√°rio que est√° pendente
            const formsDb = whitelistServer?.db?.forms || {};
            
            // Verificar se o usu√°rio j√° tem uma solicita√ß√£o pendente
            const temPendente = Object.values(formsDb).some(form => 
                form.userId === interaction.user.id && 
                form.status === 'pendente'
            );
            
            if (temPendente) {
                return await interaction.reply({
                    content: 'Voc√™ j√° possui uma solicita√ß√£o de whitelist pendente. Por favor, aguarde a an√°lise da equipe.',
                    ephemeral: true
                });
            }
            
            // Verificar se o usu√°rio j√° foi aprovado
            const temAprovado = Object.values(formsDb).some(form => 
                form.userId === interaction.user.id && 
                form.status === 'aprovado'
            );
            
            if (temAprovado) {
                return await interaction.reply({
                    content: 'Voc√™ j√° possui whitelist aprovada neste servidor!',
                    ephemeral: true
                });
            }

            // Criar link √∫nico para este usu√°rio
            const whitelistLink = whitelistServer.createWhitelistLink(
                interaction.user.id,
                interaction.guild.id
            );

            if (!whitelistLink) {
                return await interaction.reply({
                    content: 'N√£o foi poss√≠vel gerar seu link de whitelist. Pode ser que voc√™ j√° tenha uma solicita√ß√£o pendente ou aprovada.',
                    ephemeral: true
                });
            }

            // Criar embed com o link
            const embed = new EmbedBuilder()
                .setColor('#3498db')
                .setTitle('üìù Sistema de Whitelist')
                .setDescription(`Ol√° ${interaction.user.username}! Clique no bot√£o abaixo para acessar o formul√°rio de whitelist.`)
                .addFields(
                    { name: '‚è±Ô∏è Aten√ß√£o', value: 'Este link √© v√°lido por **30 minutos**. Ap√≥s esse per√≠odo, voc√™ precisar√° gerar um novo.' },
                    { name: 'üìã Instru√ß√µes', value: '1. Clique no bot√£o para abrir o formul√°rio\n2. Preencha todas as informa√ß√µes corretamente\n3. Envie o formul√°rio e aguarde a aprova√ß√£o' }
                )
                .setFooter({ text: 'Acesse o site para preencher seu formul√°rio completo' })
                .setTimestamp();

            // Bot√£o para o link
            const button = new ActionRowBuilder().addComponents(
                new ButtonBuilder()
                    .setLabel('Abrir Formul√°rio de Whitelist')
                    .setStyle(ButtonStyle.Link)
                    .setURL(whitelistLink)
                    .setEmoji('üìù'),
            );

            // Responder com o link
            await interaction.reply({
                embeds: [embed],
                components: [button],
                ephemeral: true
            });

        } catch (error) {
            console.error('‚ùå Erro ao gerar link de whitelist:', error);
            await interaction.reply({
                content: 'Ocorreu um erro ao gerar seu link de whitelist. Por favor, tente novamente mais tarde.',
                ephemeral: true
            });
        }
    },

    // Estas fun√ß√µes s√£o mantidas para compatibilidade com o sistema antigo
    async handleButton(interaction, client) {
        // Redirecionar para o novo sistema baseado em web
        await this.execute(interaction, client);
    },

    async handleModal(interaction, client) {
        // Esta fun√ß√£o n√£o √© mais necess√°ria no novo sistema
        await interaction.reply({
            content: 'O sistema de whitelist foi atualizado. Por favor, use o comando /whitelist para acessar o novo sistema.',
            ephemeral: true
        });
    }
};